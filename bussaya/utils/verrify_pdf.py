import re
import subprocess
import tempfile
import os





'''

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OpenSSL

‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å:
  - extract_certificates(pdf_path, ca_cert_path): ‡∏î‡∏∂‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö, ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ã‡πá‡∏ô

‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î:
  - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hash ‡πÑ‡∏î‡πâ
  - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

'''



def run_openssl(command, input_data=None, text_output=True):
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OpenSSL ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    try:
        result = subprocess.run(
            command,
            input=input_data,
            capture_output=True,
            check=True,
            text=text_output
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        '''   
            #####debug code
        print("‚ùå OpenSSL Error:", e.stderr)
        '''
        return None


def extract_certificate_from_signature(signature_binary, output_cert_path):
    """‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (PKCS#7) ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PEM"""
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    temp_dir = os.path.join(os.getcwd(), "bussaya/certificate")
    os.makedirs(temp_dir, exist_ok=True)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    with tempfile.NamedTemporaryFile(delete=False, dir=temp_dir, suffix=".der") as temp_sig_file:
        temp_sig_file.write(signature_binary)
        temp_sig_file_path = temp_sig_file.name

    # ‡πÉ‡∏ä‡πâ OpenSSL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
    output_cert_path = os.path.join(temp_dir, output_cert_path)
    command = ["openssl", "pkcs7", "-inform", "DER", "-print_certs", "-out", output_cert_path]
    result = run_openssl(command, signature_binary, text_output=False)

    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    os.remove(temp_sig_file_path)

    return os.path.exists(output_cert_path)


def verify_certificate(ca_cert_path, cert_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏±‡∏ö CA ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    command = ["openssl", "verify", "-CAfile", ca_cert_path, cert_path]
    result = run_openssl(command)
    return result and "OK" in result


def extract_certificates(pdf_file, ca_cert_path):
    """‡∏î‡∏∂‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö, ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ã‡πá‡∏ô"""
    try:
        data = pdf_file
        if isinstance(data, str):
            data = data.encode('utf-8')
    except Exception as e:
        '''   
            #####debug code
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF: {e}")
        '''
        return []
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF
    matches = re.findall(rb"/(?:Contents|ByteRange|Signature|Sig|Cert|SignedData|PKCS7)\s*<([0-9A-Fa-f]+)>", data)
    if not matches:
        '''   
            #####debug code
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF")
        '''
        return []
    
    verified_signer_names = []
    temp_dir = os.path.join(os.getcwd(), "bussaya/certificate")
    os.makedirs(temp_dir, exist_ok=True)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ

    for i, hex_data in enumerate(matches):
        try:
            signature_binary = bytes.fromhex(hex_data.decode())
            cert_path = os.path.join(temp_dir, f"cert_{i}.pem")
            
            # ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
            if not extract_certificate_from_signature(signature_binary, cert_path):
                '''   
                    #####debug code
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1}")
                '''
                continue
            '''   
                #####debug code
            print(f"üîπ ‡∏û‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1}:")
            '''
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏±‡∏ö CA
            if not verify_certificate(ca_cert_path, cert_path):
                '''   
                    #####debug code
                print(f"‚ùå ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
                '''
                os.remove(cert_path)
                continue
            
            #####print(f"‚úÖ ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1} ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö") debug code 
            
            # ‡πÉ‡∏ä‡πâ OpenSSL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            with tempfile.NamedTemporaryFile(delete=False, dir=temp_dir, suffix=".der") as temp_sig_file:
                temp_sig_file.write(signature_binary)
                temp_sig_file_path = temp_sig_file.name
            
            output_text = run_openssl(["openssl", "pkcs7", "-inform", "DER", "-in", temp_sig_file_path, "-print_certs", "-noout", "-text"])
            os.remove(temp_sig_file_path)
            os.remove(cert_path)
            
            '''            
            #####debug code
            if not output_text:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1}")
                continue
            '''
            
            # ‡∏î‡∏∂‡∏á CN (Common Name) ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
            cn_matches = re.findall(r"CN=([^,\n]+)", output_text)
            if cn_matches:
                signer_name = cn_matches[-1].split('/')[0]
                verified_signer_names.append(signer_name)
                # print(f"   - ‡πÄ‡∏ã‡πá‡∏ô‡πÇ‡∏î‡∏¢: {signer_name}")
            else:
                pass
                # print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö CN ‡πÉ‡∏ô‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1}")
        
        except Exception as e:
            '''
            #####debug code
            print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà {i+1}: {e}")
            '''
            pass
    
    return verified_signer_names

'''
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:

    cert_path = 'trust_cert.pem'  # ‡πÑ‡∏ü‡∏•‡πå CA ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    pdf_path = 'your_pdf.pdf'  # ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

    verified_signers = extract_certificates(pdf_path, cert_path)
    print("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:", verified_signers)
'''
